alias ll='ls -lGHa'

# Define global variable for aliases
workspace_path=~/my-workspace

# CD aliases
alias repo1='cd $workspace_path/repo1 && ls -la'
alias repo1='cd $workspace_path/repo2 && ls -la'
alias repo2='cd $workspace_path/repo3 && ls -la'
alias terraform-repo1='cd $workspace_path/terraform-repo1 && alias tfall="terraform fmt -recursive $workspace_path/$(pwd | cut -d / -f 6)" && ls -la'
alias terraform-repo2='cd $workspace_path/terraform-repo2 && alias tfall="terraform fmt -recursive $workspace_path/$(pwd | cut -d / -f 6)" && ls -la'

# Terraform
alias ta="terraform apply"
alias td="terraform destroy"
alias tf="terraform fmt -recursive"
alias tfall='terraform fmt -recursive'
alias ti="terraform init"
alias tia='ti && ta'
alias tip='ti && tp'
alias to="terraform output"
alias tp="tfall && terraform plan"
alias ts="terraform state"
alias tu="terraform force-unlock -force"
alias tv="terraform validate"
alias cleanup='echo | find $workspace_path -type d -name .terraform | xargs rm -rf'
alias renewproviders='rm -rf ./.terraform.lock.hcl && terraform providers lock -platform=linux_amd64  -platform=darwin_amd64'

# git
alias gcm='git checkout $(git_main_branch) && git pull'
alias gam='function _gam() { git add -A && git commit --verbose -m "$*" && git push; }; _gam' # git add, commit and push all together. run: 'gam "this is commit"'
alias dlb='stale_branch=$(git branch --show-current) && git checkout $(git_main_branch) && git pull && git branch -d $stale_branch' #delete local branch, checkout main and pull
alias fullrebase='current_branch=$(git branch --show-current) && git checkout $(git_main_branch) && git pull && git checkout $current_branch && git rebase $(git_main_branch)' #rebase current branch, run 'git push -f' right after if there are no conflicts

# creates new GitHub Pull Request. optional jira ticket id (e.g:1234). run: 'newpr test_pr 1234'
newpr() {
    BPurple='\033[1;35m'
    Color_Off='\033[0m'
    Green='\033[0;102m'

    echo "terraform format"
    tfall

    echo "${BPurple}git status:${Color_Off}"
    gst
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

    echo "${BPurple}switching to master and pull...${Color_Off}"
    git checkout $(git_main_branch)
    git pull
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

    echo "${BPurple}creating new branch...${Color_Off}"
    git branch "$1"
    git checkout "$1"
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    
    echo "${BPurple}git status:${Color_Off}"
    gst
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

    echo "${BPurple}staging all commits...${Color_Off}"
    ga -A 
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

    echo "${BPurple}git status:${Color_Off}"
    gst
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

    echo "${BPurple}commiting first commit...${Color_Off}"
    gc -m "$2 - $1"
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

    echo "${BPurple}pushing branch to remote...${Color_Off}"
    RESULT=$(git push --set-upstream origin $1 2>&1 1>/dev/null | cat)
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '*'
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '*'
    HTTP=$(echo $RESULT | grep -o 'https://[0-9a-zA-Z.]*\/.*\S')
    echo "Opening GitHub to create new pr :)"
    echo "${Green}$HTTP${Color_Off}"
    sleep 3
    open $HTTP
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '*'
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '*'

    echo "${BPurple}git status:${Color_Off}"
    gst 
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}
